/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k == 0 || head.next == null) return head;
        
        ListNode count = head; 
        ListNode fast = head;
        ListNode slow = head;
        int counter = 1;
        
        while (count.next != null){
            counter++;
            count = count.next;
        }
        
        k = k % counter; 
        
        for (int i = 0; i < k; i++){
            fast = fast.next;
        }
        
        if (fast == null) return head; 
        while (fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        
        fast.next = head;
        fast = slow.next;
        slow.next = null;
        return fast;
    }
}