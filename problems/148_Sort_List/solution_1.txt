/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode mid = findMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        return MergeList(left, right);
    }
    
    private ListNode MergeList (ListNode L1, ListNode L2){
        ListNode dummyNode = new ListNode();
        ListNode tail = dummyNode;
        
        while (L1 != null && L2 != null){
            if (L1.val <= L2.val){
                tail.next = L1;
                L1 = L1.next;
                tail = tail.next;
            } else {
                tail.next = L2;
                L2 = L2.next;
                tail = tail.next;
            }
        }
        
        if (L1 == null) {
            tail.next = L2;
        } else {
            tail.next = L1;
        }
        return dummyNode.next;
    }
    
    private ListNode findMid(ListNode head){
        ListNode slow = null;
        
        while (head != null && head.next != null){
            if (slow == null){
                slow = head;
            } else {
                slow = slow.next;
            }
            head = head.next.next;
        }
        
        ListNode mid = slow.next;
        slow.next = null;
        return mid;
    }
}